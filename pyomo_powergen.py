import pyomo.environ as pyo
from pyomo.environ import *
from pyomo.opt import SolverFactory
import pandas as pd
import numpy as np

# load the data
# load data generation sheet
data_gen = pd.read_excel("data/inputs.xlsx", sheet_name="gen")

# load data load sheet
data_load = pd.read_excel("data/inputs.xlsx", sheet_name="load")

# create number of generators
num_gen = len(data_gen)

# create a model to solve the optimisation problem
model = pyo.ConcreteModel()

# create a power generation for the model
model.power_gen = pyo.Var(range(num_gen), bounds=(0,None))
power_gen = model.power_gen # assign the power generation optimised variable

# create the constraints of the optimisation problem
power_gen_sum = sum([power_gen[generator] for generator in data_gen["id"]])

model.balance = pyo.Constraint(expr= power_gen_sum == sum(data_load["value"]))

# create model condition for the load demand for load point 0
model.cond = pyo.Constraint(expr= power_gen[0]+power_gen[3] >= data_load["value"][0])

# create limit constraint - power generated by each generator must be less or equal to the generation limit
model.limits = pyo.ConstraintList()
power_gen_limit = model.limits
for generator in data_gen["id"]:
    power_gen_limit.add(expr=power_gen[generator]<= data_gen["limit"][generator])

# create objective function
    